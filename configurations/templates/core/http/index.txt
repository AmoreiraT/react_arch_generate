import { TimeoutError } from '@core/error/timeout';
import axios, { AxiosError, AxiosRequestConfig } from 'axios';

import { getLocalStorage } from '@shared/utils/localStorage';
import { useNavigate } from 'react-router-dom';
import { logCrash } from '@shared/utils/crash/crash';
import { HttpRequest, ApiResponse, HttpResponse } from './protocols';

const getApiUrl = (env: string) => {
  switch (env) {
    case 'UAT':
      return import.meta.env.VITE_API_BASE_URL_UAT;
    case 'VITE_API_BASE_URL_SIT':
      return import.meta.env.VITE_API_BASE_URL_SIT;
    case 'VITE_API_BASE_URL_PROD':
      return import.meta.env.VITE_API_BASE_URL_PROD;
    case 'VITE_API_BASE_URL_LOCAL':
      return import.meta.env.VITE_API_BASE_URL_LOCAL;
    case 'VITE_API_BASE_URL_DEV':
      return import.meta.env.VITE_API_BASE_URL_DEV;
    default:
      return import.meta.env.VITE_API_BASE_URL;
  }
};

export const useHttpClient = () => {
  const navigate = useNavigate();

  const apiUrl = getApiUrl(import.meta.env.VITE_API_BASE_URL);
  const sendApiRequest = async <T extends object>(requestData: HttpRequest) => {
    return axios
      .request<ApiResponse<T>>({
        url: `${apiUrl}${requestData.url}`,
        method: requestData.method,
        data: requestData.body,
        headers: requestData.headers,
        timeout: 300000, // 5 min
        responseType: requestData.responseType,
      } as AxiosRequestConfig<T>)
      .then((res) => {
        console.info('res:', res);

        return res as ApiResponse<T>;
      })
      .catch((err) => {
        // logCrash(err);
        if (
          ('response' in err && err.response?.data.code === '999') ||
          ('response' in err && err.response?.data.code === 'KCB-40')
        ) {
          navigate(`/system-error`);
          // logCrash(err.response);
        }
        const getErrNetWork = err as AxiosError;
        if (getErrNetWork.code === 'ERR_NETWORK') {
          navigate(`/system-error`);
        }

        return err as TimeoutError;
      });
  };

  const sendExternalRequest = async <T extends object>(
    requestData: HttpRequest
  ) => {
    return axios
      .request<ApiResponse<T>>({
        url: `${requestData.url}`,
        method: requestData.method,
        data: requestData.body,
        headers: requestData.headers,
        timeout: 300000, // 5 min
      } as AxiosRequestConfig<T>)
      .then((res) => {
        return res as ApiResponse<T>;
      })
      .catch((err) => {
        // logCrash(err);
        return err as TimeoutError;
      });
  };

  axios.interceptors.request.use((req) => {
    const token = getLocalStorage('@access-token');

    if (token && req.headers) req.headers.Authorization = `Bearer ${token}`;

    return req;
  });

  axios.interceptors.response.use(
    (response) => response,
    (error) => {
      // logCrash(error);
      return Promise.reject(error);
    }
  );

  return { sendApiRequest, sendExternalRequest } as const;
};
