/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable no-console */
import { ErrorInfo } from 'react';

function isLocal(): boolean {
  return (
    window.location?.href?.includes('localhost') ||
    window.location?.href?.includes('127.0.0.1')
  );
}

const getApiUrl = (env: string) => {
  switch (env) {
    case 'UAT':
      return import.meta.env.VITE_API_BASE_URL_UAT;
    case 'VITE_API_BASE_URL_SIT':
      return import.meta.env.VITE_API_BASE_URL_SIT;
    case 'VITE_API_BASE_URL_PROD':
      return import.meta.env.VITE_API_BASE_URL_PROD;
    case 'VITE_API_BASE_URL_LOCAL':
      return import.meta.env.VITE_API_BASE_URL_LOCAL;
    case 'VITE_API_BASE_URL_DEV':
      return import.meta.env.VITE_API_BASE_URL_DEV;
    default:
      return import.meta.env.VITE_API_BASE_URL;
  }
};

function showOverlay(): boolean {
  const env = import.meta.env.VITE_AMBIENTE;
  return isLocal() || env === 'dev';
}
function getUsername(): string {
  try {
    return localStorage.getItem('@userName') ?? '';
  } catch {
    return '';
  }
}
function sendDebugDataToServer(str: string, subject: string): void {
  try {
    if (showOverlay()) {
      const elem =
        document.getElementById('project-crashOverlay') ??
        document.createElement('div');
      if (!elem.id) {
        elem.id = 'project-crashOverlay';
        document.body.appendChild(elem);
      }
      elem.style.display = 'block';

      const div = document.createElement('div');
      div.innerText = str;
      elem.appendChild(div);

      div.addEventListener('click', () => {
        try {
          elem.removeChild(div);
          if (elem.children.length === 0) {
            elem.style.display = 'none';
          }
        } catch (error) {
          console.error(error);
        }
      });
    }

    if (isLocal()) return;

    try {
      const envUrl = getApiUrl(import.meta.env.VITE_API_BASE_URL);
      const stage = import.meta.env.VITE_AMBIENTE;
      const req = new Request(`${envUrl}api/Corporate/crash`, {
        method: 'POST',
        headers: new Headers({
          'Content-Type': 'application/json',
        }),
        mode: 'cors',
        body: JSON.stringify({
          text: `${stage}\n${getUsername()}\n${str}`,
          subject: subject?.trim() ?? '',
        }),
        cache: 'no-cache',
        // credentials: "include"
      });
      fetch(req)
        .then(() => true)
        .catch((f) => console.error(f));
    } catch (e) {
      console.error(e);
    }
  } catch (_e) {
    console.error(_e);
  }
}
export function logCrash(e: any, errorInfo: ErrorInfo | null = null) {
  try {
    if (e.status === 401) {
      // not logged in
      return;
    }
    const msg = e.message || e.toString();
    const showStack = true;
    const l = window.location.href;

    let str = `\n${l}\n${''}\n${navigator?.userAgent}\n\n${e.name}\n`;

    if (e.url) str += `${e.url}\n\n`;

    if (e.code) str += `${e.code}\n`;
    if (msg) str += `${msg}\n`;

    if (e.status) str += `${e.status}\n`;
    if (e.statusText) str += `${e.statusText}\n\n`;

    if (errorInfo?.componentStack != null)
      str += `${errorInfo?.componentStack}\n`;
    else if (showStack && e.stack) str += `${e.stack}\n`;

    if (e.request_id) str += `${e.request_id}\n`;
    if (e.fileName) str += `${e.fileName}\n`;
    if (e.lineNumber) str += `${e.lineNumber}\n`;
    if (e.columnNumber) str += `${e.columnNumber}\n`;

    sendDebugDataToServer(str, `${''} - ${msg ?? e.stack ?? ''}`);
  } catch (err) {
    console.error(err);
  }
}

function catchFn(event: any) {
  try {
    // logCrash(event);
    const l = window.location.href;

    const stack =
      event.reason?.stack ?? event.stack ?? event.reason ?? event.toString();

    const str = `UnhandledRejection\n\n${l}\n${''}\n${
      navigator?.userAgent
    }\n\n${event.message}\n${stack}`;

    sendDebugDataToServer(str, `${''} - ${event.message ?? stack ?? ''}`);
  } catch (err) {
    console.error(err);
  }
}

export function setupLogCrash() {
  try {
    window.addEventListener('error', (event: ErrorEvent) => {
      const { message, error, lineno, colno } = event;

      if (!error && !lineno && !colno) {
        return;
      }

      try {
        // logCrash(event);
        const l = window.location.href;
        // const useUsuario = useGetUsernameFromStore();
        const str = `OnError\n\n${l}\n${''}\n${
          navigator?.userAgent
        }\n\n${message}\n${error}\n${lineno}\n${colno}`;

        sendDebugDataToServer(str, `${''} - ${message ?? error ?? ''}`);
      } catch (err) {
        console.error(event);
        console.error(err);
      }
    });
  } catch (_err) {
    console.error(_err);
  }
  try {
    window.addEventListener(
      'unhandledrejection',
      (event) => catchFn(event),
      true
    );
  } catch (_err) {
    console.error(_err);
  }
  try {
    window.addEventListener(
      'uncaughtexception',
      (event) => catchFn(event),
      true
    );
  } catch (_err) {
    console.error(_err);
  }
}

interface ErrorHandler {
  handleError(error: any): void;
}

export class ProjectErrorHandler implements ErrorHandler {
  // eslint-disable-next-line class-methods-use-this
  handleError(error: any) {
    logCrash(error);
  }
}
